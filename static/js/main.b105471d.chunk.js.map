{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","email","id","name","phone","className","alt","src","Fragment","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCOCQ,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAiB,EAAXC,MAC5B,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,gCAA2BL,EAA3B,cACrB,eAAC,IAAMM,SAAP,WACI,6BAAKL,IACL,4BAAIF,WCmBLQ,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEX,OACA,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,cAAC,EAAD,CAEAX,GAAKQ,EAAOG,GAAGX,GACfC,KAAOO,EAAOG,GAAGV,KACjBF,MAAQS,EAAOG,GAAGZ,OAHZY,SCGXC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAY,oCACZW,KAAO,SACPC,YAAc,gBACdC,SAAYH,OCEbI,G,MATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKJ,EAAMK,aCwCJC,E,kDAtCX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfI,MAAM,8CACLxC,MAAK,SAAAyC,GAAQ,OAAGA,EAASC,UACzB1C,MAAK,SAAA2C,GAAK,OAAG,EAAKR,SAAS,CAACnB,OAAQ2B,S,oBAOzC,WACI,MAA8BC,KAAKL,MAA5BvB,EAAP,EAAOA,OAAQoB,EAAf,EAAeA,YACTS,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASb,EAAYY,kBAGzD,OAAQhC,EAAOkC,OAGX,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWU,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUjB,OAAQ6B,SAN1B,6C,GA1BUM,aCClBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjD1D,M","file":"static/js/main.b105471d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({email, id, name, phone}) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/(${id}?200x200`} />\r\n            <React.Fragment>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </React.Fragment>\r\n        </div>\r\n    );\r\n}\r\n    \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n        return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                    <Card \r\n                    key= {i} \r\n                    id= {robots[i].id} \r\n                    name= {robots[i].name} \r\n                    email= {robots[i].email}\r\n                />\r\n                );\r\n            })\r\n            }\r\n        </div> \r\n            );\r\n     }\r\n\r\n   \r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa3'>\r\n            <input \r\n                className = 'pa3 ba b--yel bg-lightest-blue tc'\r\n                type = 'search'\r\n                placeholder = 'search robots'\r\n                onChange = {searchChange}\r\n            />\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height:'750px'}}>\r\n            {props.children}\r\n        </div>\r\n    ); \r\n}\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './app.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component  {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })  \r\n\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'> RoboFriends </h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App /> ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}